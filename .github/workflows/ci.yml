name: Firebase Deployment Pipeline

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  terraform-deploy:
    name: Terraform Deployment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.3.7

      - name: Set up Google Cloud credentials
        uses: google-github-actions/setup-gcloud@v0.6.0
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Export GCP Credentials for Terraform
        run: echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' > /tmp/gcp-key.json

      - name: Set GOOGLE_APPLICATION_CREDENTIALS
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json" >> $GITHUB_ENV

      - name: Initialize Terraform
        run: terraform init
        working-directory: terraform

      - name: Apply Terraform configuration
        run: terraform apply -auto-approve
        working-directory: terraform

  # Job for deploying to the staging environment during PRs
  staging-deploy:
    name: Staging Deployment for PR
    runs-on: ubuntu-latest
    needs: terraform-deploy  # Ensure Terraform runs first
    if: github.event_name == 'pull_request'  # Run only on PRs
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install --force
        working-directory: ./car-tracker

      - name: Build Next.js App
        run: npm run build
        working-directory: ./car-tracker

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate Firebase CLI (Staging)
        run: firebase use poc-car-delivery
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        working-directory: ./car-tracker

      - name: Create Firebase Web App (if not exists)
        run: |
          PROJECT_ID="poc-car-delivery"
          SERVICE_ACCOUNT_KEY=$(echo '${{ secrets.FIREBASE_TOKEN }}' | base64 --decode)
          
          # Get OAuth Token
          ACCESS_TOKEN=$(curl -s -X POST -H "Content-Type: application/json" \
            -H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
            "https://oauth2.googleapis.com/token" \
            --data "$(echo $SERVICE_ACCOUNT_KEY)" | jq -r '.access_token')
          
          # Check if Firebase Web App Exists
          RESPONSE=$(curl -s -X GET \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            "https://firebase.googleapis.com/v1beta1/projects/$PROJECT_ID/webApps")
          
          if echo "$RESPONSE" | grep -q '"webApps": \[\]'; then
            echo "No Firebase Web App found. Creating one..."
            curl -s -X POST \
              -H "Authorization: Bearer $ACCESS_TOKEN" \
              -H "Content-Type: application/json" \
              -d '{}' \
              "https://firebase.googleapis.com/v1beta1/projects/$PROJECT_ID/webApps"
          else
            echo "Firebase Web App already exists."
          fi

      - name: Deploy to Firebase Hosting (Staging)
        run: firebase deploy --only hosting --project poc-car-delivery
        working-directory: ./car-tracker

  # Job for deploying to production when changes are pushed to main
  production-deploy:
    name: Production Deployment
    runs-on: ubuntu-latest
    needs: terraform-deploy  # Ensure Terraform runs first
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'  # Run only on push to main
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install --force
        working-directory: ./car-tracker

      - name: Build Next.js App
        run: npm run build
        working-directory: ./car-tracker

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Authenticate Firebase CLI (Production)
        run: firebase use poc-car-delivery
        env:
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
        working-directory: ./car-tracker

      - name: Create Firebase Web App (if not exists)
        run: |
          APP=$(gcloud beta firebase apps list --format="value(appId)" --filter="projectId:poc-car-delivery")
          if [ -z "APP" ]; then
            gcloud firebase apps:create WEB --display-name="POC App" --project=poc-car-delivery
          fi

      - name: Deploy to Firebase Hosting (Production)
        run: firebase deploy --only hosting --project poc-car-delivery
        working-directory: ./car-tracker
